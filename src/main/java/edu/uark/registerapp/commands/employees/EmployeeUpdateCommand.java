package edu.uark.registerapp.commands.employees;

import java.util.UUID;

import javax.transaction.Transactional;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import edu.uark.registerapp.commands.ResultCommandInterface;
import edu.uark.registerapp.commands.exceptions.ConflictException;
import edu.uark.registerapp.commands.exceptions.NotFoundException;
import edu.uark.registerapp.commands.exceptions.UnprocessableEntityException;
import edu.uark.registerapp.models.api.Employee;
import edu.uark.registerapp.models.entities.EmployeeEntity;
import edu.uark.registerapp.models.repositories.EmployeeRepository;
import net.bytebuddy.dynamic.DynamicType.Builder.FieldDefinition.Optional;


// (JK)
@Service
public class EmployeeUpdateCommand implements ResultCommandInterface<Employee> {

    @Override
	public Employee execute() {
		this.validateProperties();

		final EmployeeEntity updateEmployeeEntity = this.updateEmployeeEntity();

		// Synchronize information generated by the database upon INSERT.
		this.apiEmployee.setId(updateEmployeeEntity.getId()); 
		this.apiEmployee.setCreatedOn(updateEmployeeEntity.getCreatedOn());

		return this.apiEmployee;
	}
    
    
    // Helper methods
    private void validateProperties() {
        if (StringUtils.isBlank(this.apiEmployee.getEmployeeId())) {
            throw new UnprocessableEntityException("Id");
        }
        if (StringUtils.isBlank(this.apiEmployee.getFirstName())){
            throw new UnprocessableEntityException("First Name");
        }
        if (StringUtils.isBlank(this.apiEmployee.getLastName())){
            throw new UnprocessableEntityException("Last Name");
        }

    }


    @Transactional
	private EmployeeEntity updateEmployeeEntity() {
		final java.util.Optional<EmployeeEntity> queriedEmployeeEntity =
			this.employeeRepository
				.findById(this.apiEmployee.getId());

		if (queriedEmployeeEntity.isPresent()) {
			// Lookupcode already defined for another product.
			throw new NotFoundException("Id");
		}


		// Write, via an INSERT, the new record to the database.
		return this.employeeRepository.save(
			new EmployeeEntity(apiEmployee));
    }
    

    private Employee apiEmployee;
    public Employee getApiEmployee() {
		return this.apiEmployee;
	}
	public EmployeeUpdateCommand setApiEmployee(final Employee apiEmployee) {
		this.apiEmployee = apiEmployee;
		return this;
	}

    private UUID employeeId;
    public UUID getEmployeeId() {
		return this.employeeId;
	}
	public EmployeeUpdateCommand setEmployeeId(final UUID employeeId) {
		this.employeeId = employeeId;
		return this;
    }
    @Autowired
	private EmployeeRepository employeeRepository;
}
